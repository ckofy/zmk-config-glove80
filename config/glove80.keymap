/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define HYPER LC(LS(LG(LALT)))

// layers
#define DEFAULT 0
#define QWE 1
#define LWR 2
#define RSE 3
#define MAGIC 4
#define FACTORY_TEST 5

/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to
/*      layer_td: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo LOWER>, <&to LOWER>;
        }; */
		skq: sticky_key_quick_release {
			compatible = "zmk,behavior-sticky-key";
			label = "STICKY_KEY_QUICK_RELEASE";
			#binding-cells = <1>;
			bindings = <&kp>;
			release-after-ms = <500>;
			quick-release;
		};
		pht: positional_hold_tap {
			compatible = "zmk,behavior-hold-tap";
			label = "POSITIONAL_HOLD_TAP";
			#binding-cells = <2>;
			flavor = "hold-preferred";
			tapping-term-ms = <200>;
			quick-tap-ms = <200>;
			bindings = <&kp>, <&kp>;
		};
        magic: magic_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
           &kp F1      &kp F2   &kp F3    &kp F4     &kp F5                                                                                      &kp F6     &kp F7    &kp F8   &kp F9    &kp F10
           &kp GRAVE   &kp N7   &kp N5    &kp N3     &kp N1   &kp N9                                                                     &kp N8  &kp N0     &kp N2    &kp N4   &kp N6    &kp BSPC
           &kp TAB     &kp Q    &kp W     &kp F      &kp P    &kp B                                                                      &kp J   &kp L      &kp U     &kp Y    &kp SEMI  &kp BSLH
           &kp LCTRL   &kp A    &kp R     &kp S      &kp T    &kp G                                                                      &kp M   &kp N      &kp E     &kp I    &kp O     &kp SQT
           &kp LSHFT   &kp Z    &kp X     &kp C      &kp D    &kp V  &kp TAB   &kp LALT   &magic MAGIC 0  &kp LGUI  &kp DEL    &kp BSPC  &kp K   &kp H    &kp COMMA   &kp DOT  &kp FSLH  &kp UP
           &kp LEFT   &kp RIGHT &kp ESC   &kp EQUAL  &kp LBKT        &mo LWR   &kp SPACE  &kp LCTRL       &kp RET   &skq LSHFT &mo RSE           &kp RBKT &kp MINUS   &kp SQT  &kp PG_DN &kp DOWN
            >;
        };
        qwerty_layer {
          bindings = <
		  &trans  &trans   &trans    &trans     &trans                                                                       &trans     &trans    &trans   &trans   &trans
		  &kp ESC &kp N1   &kp N2    &kp N3     &kp N4  &kp N5                                                       &kp N6  &kp N7     &kp N8    &kp N9   &kp N0   &trans
		  &trans  &kp Q    &kp W     &kp E      &kp R   &kp T                                                        &kp Y   &kp U      &kp I     &kp O    &kp P    &trans
		  &trans  &kp A    &kp S     &kp D      &kp F   &kp G                                                        &kp H   &kp J      &kp K     &kp L    &kp SEMI &trans
		  &trans  &kp Z    &kp X     &kp C      &kp V   &kp B  &kp HOME  &trans    &trans  &trans  &trans  &kp END   &kp N   &kp M    &kp COMMA   &kp DOT  &kp FSLH &trans
		  &trans  &trans   &kp GRAVE &trans     &trans         &trans    &trans    &trans  &trans  &trans  &trans            &trans     &trans    &kp PG_UP &kp PG_DN    &trans
          >;
        };		

        lower_layer {
            bindings = <
		   &to 0   &trans    &trans    &trans    &trans                                                                           &trans    &trans    &trans    &trans   &trans
		   &to QWE &trans    &trans    &trans    &trans    &trans                                                       &trans    &trans    &trans    &trans    &trans   &trans
		   &trans  &trans    &trans    &kp LC(E) &kp CAPS  &kp LC(B)                                                    &kp PG_UP &kp HOME  &kp UP    &kp END   &kp DEL  &trans
		   &trans  &kp LGUI  &kp LALT  &kp LSHFT &kp LCTRL &kp LC(S)                                                    &kp PG_DN &kp LEFT  &kp DOWN  &kp RIGHT &kp BSPC &trans
		   &trans  &kp LC(Z) &kp LC(X) &kp LC(C) &kp LC(V) &trans    &trans    &trans    &trans  &trans  &trans  &trans &kp INS   &trans    &trans    &trans    &trans   &trans
		   &trans  &trans    &trans    &trans    &trans              &trans    &trans    &trans  &trans  &trans  &trans           &trans    &trans    &trans    &trans   &trans
            >;
        };
		
        raise_layer {
            bindings = <
		   &trans  &trans    &trans    &trans    &trans                                                                           &trans    &trans    &trans    &kp F11   &kp F12
		   &trans  &trans    &trans    &trans    &trans    &trans                                                       &trans    &trans    &trans    &trans    &trans    &trans
		   &trans  &kp AMPS  &kp PRCNT &kp HASH  &kp LPAR  &kp EXCL                                                     &kp ASTRK &kp RPAR  &kp AT    &kp DLLR  &kp CARET &trans
		   &trans  &kp N7    &kp N5    &kp N3    &kp N1    &kp N9                                                       &kp N8    &kp N0    &kp N2    &kp N4    &kp N6    &trans
		   &trans  &kp GRAVE &kp LBKT  &kp RBKT  &kp UNDER &kp EQUAL &trans    &trans    &trans  &trans  &trans  &trans &kp PLUS  &kp MINUS &trans    &trans    &kp BSLH  &trans
		   &trans  &trans    &trans    &trans    &trans              &trans    &trans    &trans  &trans  &trans  &trans           &trans    &trans    &trans    &trans    &trans
            >;
        };		

        magic_layer {
            bindings = <
            &bt BT_CLR        &none               &none           &none           &none                                                                                                           &none      &none      &none      &none      &bt BT_CLR_ALL
            &none             &none               &none           &none           &none           &none                                                                                &none      &none      &none      &none      &none      &none
            &none             &rgb_ug RGB_SPI     &rgb_ug RGB_SAI &rgb_ug RGB_HUI &rgb_ug RGB_BRI &rgb_ug RGB_TOG                                                                      &none      &none      &none      &none      &none      &none
            &bootloader       &rgb_ug RGB_SPD     &rgb_ug RGB_SAD &rgb_ug RGB_HUD &rgb_ug RGB_BRD &rgb_ug RGB_EFF                                                                      &none      &none      &none      &none      &none      &bootloader
            &sys_reset        &none               &none           &none           &none           &none           &bt_2     &bt_3     &none            &none     &none     &none       &none      &none      &none      &none      &none      &sys_reset
            &none             &none               &none           &none           &none                           &bt_0     &bt_1     &out OUT_USB     &none     &none     &none                  &none      &none      &none      &none      &to FACTORY_TEST
            >;
        };

        factory_test_layer {
            bindings = <
            &kp N0   &kp N6   &kp N2   &kp N8   &kp N4                                                                              &kp N4   &kp N8   &kp N2   &kp N6   &kp N0
            &kp N1   &kp N7   &kp N3   &kp N9   &kp N5   &kp N0                                                            &kp N0   &kp N5   &kp N9   &kp N3   &kp N7   &kp N1
            &kp N2   &kp N8   &kp N4   &kp N0   &kp N6   &kp N1                                                            &kp N1   &kp N6   &kp N0   &kp N4   &kp N8   &kp N2
            &kp N3   &kp N9   &kp N5   &kp N1   &kp N7   &kp N2                                                            &kp N2   &kp N7   &kp N1   &kp N5   &kp N9   &kp N3
            &kp N4   &kp N0   &kp N6   &kp N2   &kp N8   &kp N3   &kp N4   &kp N5   &kp N6      &kp N6   &kp N5   &kp N4   &kp N3   &kp N8   &kp N2   &kp N6   &kp N0   &kp N4
            &kp N5   &kp N1   &kp N7   &kp N3   &kp N9            &kp N7   &kp N8   &kp N9      &kp N9   &kp N8   &kp N7            &kp N9   &kp N3   &kp N7   &kp N1   &kp N5
            >;
        };
    };
};
